1Ô∏è‚É£ What are data structures, and why are they important?

‚û°Ô∏è Data structures are ways to organize and store data efficiently for easy access and modification.
    They‚Äôre important because they help in optimizing algorithms and managing large data effectively.
    Example: Lists, Tuples, Sets, Dictionaries in Python.

2Ô∏è‚É£ Difference between mutable and immutable data types

‚û°Ô∏è Mutable: Can be changed after creation. Example: list, dict, set

    Immutable: Cannot be changed once created. Example: tuple, string, int

3Ô∏è‚É£ Difference between Lists and Tuples

‚û°Ô∏è
    | Feature    | List                 | Tuple                        |
    | ---------- | -------------------- | ---------------------------- |
    | Mutability | Mutable              | Immutable                    |
    | Syntax     | `[]`                 | `()`                         |
    | Speed      | Slower               | Faster                       |
    | Use case   | When data can change | When data must stay constant |

4Ô∏è‚É£ How dictionaries store data

‚û°Ô∏è Dictionaries store data as key‚Äìvalue pairs in a hash table structure.
    Example: 
        person = {"name": "John", "age": 25}

5Ô∏è‚É£ Why use a Set instead of a List?

‚û°Ô∏è Because sets don‚Äôt allow duplicates and offer faster membership checking (in keyword).

6Ô∏è‚É£ What is a string and how is it different from a list?

‚û°Ô∏è String is a sequence of characters (immutable).
    List is a sequence of elements (mutable).
    Example: "hello" ‚â† ['h', 'e', 'l', 'l', 'o']

7Ô∏è‚É£ How do tuples ensure data integrity?

‚û°Ô∏è Since tuples are immutable, their data cannot be modified ‚Äî ensuring consistency.

8Ô∏è‚É£ What is a hash table, and how does it relate to dictionaries?

‚û°Ô∏è A hash table uses a hash function to map keys to values efficiently.
    Python dictionaries are built using hash tables.

9Ô∏è‚É£ Can lists contain different data types?

‚û°Ô∏è Yes. Example:
            my_list = [1, "hello", 3.5, True]

üîü Why are strings immutable?

‚û°Ô∏è Because Python stores them in a fixed memory location for performance and security.

11Ô∏è‚É£ Advantages of dictionaries over lists

‚û°Ô∏è 1. Faster data retrieval using keys

    2. Better for associative data (key-value pairs)

12Ô∏è‚É£ When to use a tuple over a list?

‚û°Ô∏è When you want fixed data that should not change, like coordinates (x, y).

13Ô∏è‚É£ How do sets handle duplicates?

‚û°Ô∏è Automatically remove them ‚Äî only unique elements are stored.

14Ô∏è‚É£ How does ‚Äúin‚Äù work for lists vs dictionaries?

‚û°Ô∏è 1. In list: checks for element

    2. In dict: checks for key

    Example:
        3 in [1,2,3] ‚Üí True  
        "name" in {"name": "Aakash"} ‚Üí True

15Ô∏è‚É£ Can you modify elements of a tuple?

‚û°Ô∏è No. Tuples are immutable.

16Ô∏è‚É£ What is a nested dictionary? Example:

‚û°Ô∏è student = {
    "name": "John",
    "marks": {"math": 90, "science": 85}
    }

17Ô∏è‚É£ Time complexity of accessing elements in a dictionary

‚û°Ô∏è O(1) (constant time) on average.

18Ô∏è‚É£ When are lists preferred over dictionaries?

‚û°Ô∏è When data order matters or you don‚Äôt need key-value pairs.

19Ô∏è‚É£ Why are dictionaries considered unordered?

‚û°Ô∏è They‚Äôre based on hashing, not position ‚Äî order is not guaranteed before Python 3.7.

20Ô∏è‚É£ Difference between a list and a dictionary in terms of data retrieval

‚û°Ô∏è 1. List: Access by index

    2. Dict: Access by key

    